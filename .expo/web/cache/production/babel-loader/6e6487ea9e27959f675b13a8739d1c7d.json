{
  "ast": null,
  "code": "var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _core=require(\"@unimodules/core\");var _ErroRecoveryStore=require(\"./ErroRecoveryStore\");var _ExpoErrorRecovery=_interopRequireDefault(require(\"./ExpoErrorRecovery\"));if(_core.Platform.OS!=='web'){var globalHandler=ErrorUtils.getGlobalHandler();ErrorUtils.setGlobalHandler(function _callee(error,isFatal){return _regenerator.default.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!_ExpoErrorRecovery.default.saveRecoveryProps){_context.next=3;break;}_context.next=3;return _regenerator.default.awrap(_ExpoErrorRecovery.default.saveRecoveryProps((0,_ErroRecoveryStore.getRecoveryPropsToSave)()));case 3:globalHandler(error,isFatal);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);});}else if(_core.Platform.OS==='web'&&_core.Platform.isDOMAvailable){window.addEventListener('error',function(){_ExpoErrorRecovery.default.saveRecoveryProps((0,_ErroRecoveryStore.getRecoveryPropsToSave)());});}",
  "map": {
    "version": 3,
    "sources": ["../src/ErrorRecovery.fx.ts"],
    "names": [],
    "mappings": "kKAAA,sCAEA,sDACA,8EAEA,GAAI,eAAS,EAAT,GAAgB,KAApB,CAA2B,CACzB,GAAM,CAAA,aAAa,CAAG,UAAU,CAAC,gBAAX,EAAtB,CAGA,UAAU,CAAC,gBAAX,CAA4B,iBAAO,KAAP,CAAc,OAAd,wHACtB,2BAAkB,iBADI,2EAElB,2BAAkB,iBAAlB,CAAoC,+CAApC,CAFkB,SAI1B,aAAa,CAAC,KAAD,CAAQ,OAAR,CAAb,CAJ0B,qEAA5B,EAMD,CAVD,IAUO,IAAI,eAAS,EAAT,GAAgB,KAAhB,EAAyB,eAAS,cAAtC,CAAsD,CAC3D,MAAM,CAAC,gBAAP,CAAwB,OAAxB,CAAiC,UAAK,CACpC,2BAAkB,iBAAlB,CAAoC,+CAApC,EACD,CAFD,EAGD",
    "sourcesContent": [
      "import { Platform } from '@unimodules/core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"
    ],
    "sourceRoot": ""
  },
  "metadata": {},
  "sourceType": "script"
}
