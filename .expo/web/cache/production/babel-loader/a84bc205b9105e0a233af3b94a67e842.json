{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useRegisterNavigator;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var React=_interopRequireWildcard(require(\"react\"));var _nonSecure=require(\"nanoid/non-secure\");var _EnsureSingleNavigator=require(\"./EnsureSingleNavigator\");function useRegisterNavigator(){var _React$useState=React.useState(function(){return(0,_nonSecure.nanoid)();}),_React$useState2=(0,_slicedToArray2.default)(_React$useState,1),key=_React$useState2[0];var container=React.useContext(_EnsureSingleNavigator.SingleNavigatorContext);if(container===undefined){throw new Error(\"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\");}React.useEffect(function(){var register=container.register,unregister=container.unregister;register(key);return function(){return unregister(key);};},[container,key]);return key;}","map":{"version":3,"sources":["useRegisterNavigator.tsx"],"names":["React","container","unregister","register"],"mappings":"kWAAA,oDACA,4CACA,8DAMe,QAAA,CAAA,oBAAA,EAAgC,qBAC/BA,KAAK,CAALA,QAAAA,CAAe,iBAA7B,uBAA6B,EAAfA,CAD+B,iEACvC,GADuC,qBAE7C,GAAMC,CAAAA,SAAS,CAAGD,KAAK,CAALA,UAAAA,CAAlB,6CAAkBA,CAAlB,CAEA,GAAIC,SAAS,GAAb,SAAA,CAA6B,CAC3B,KAAM,IAAA,CAAA,KAAA,CAAN,wFAAM,CAAN,CAGD,CAEDD,KAAK,CAALA,SAAAA,CAAgB,UAAM,IACd,CAAA,QADc,CACpB,SADoB,CACd,QADc,CACFE,UADE,CACpB,SADoB,CACFA,UADE,CAGpBC,QAAQ,CAARA,GAAQ,CAARA,CAEA,MAAO,kBAAMD,CAAAA,UAAU,CAAvB,GAAuB,CAAhB,EAAP,CALFF,CAAAA,CAMG,CAAA,SAAA,CANHA,GAMG,CANHA,EAQA,MAAA,CAAA,GAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nimport { SingleNavigatorContext } from './EnsureSingleNavigator';\n\n/**\n * Register a navigator in the parent context (either a navigation container or a screen).\n * This is used to prevent multiple navigators under a single container or screen.\n */\nexport default function useRegisterNavigator() {\n  const [key] = React.useState(() => nanoid());\n  const container = React.useContext(SingleNavigatorContext);\n\n  if (container === undefined) {\n    throw new Error(\n      \"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\"\n    );\n  }\n\n  React.useEffect(() => {\n    const { register, unregister } = container;\n\n    register(key);\n\n    return () => unregister(key);\n  }, [container, key]);\n\n  return key;\n}\n"]},"metadata":{},"sourceType":"script"}